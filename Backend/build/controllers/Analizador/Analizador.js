/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,22],$V1=[1,23],$V2=[1,42],$V3=[1,25],$V4=[1,37],$V5=[1,38],$V6=[1,39],$V7=[1,40],$V8=[1,41],$V9=[1,43],$Va=[1,45],$Vb=[1,46],$Vc=[1,47],$Vd=[1,48],$Ve=[1,49],$Vf=[1,50],$Vg=[1,26],$Vh=[1,27],$Vi=[1,28],$Vj=[1,29],$Vk=[1,30],$Vl=[1,31],$Vm=[1,32],$Vn=[1,34],$Vo=[1,35],$Vp=[1,36],$Vq=[2,5,26,27,31,33,34,35,36,37,39,53,54,55,56,57,58,59,61,63,64,67,68,69,70,74,75,76,79,83],$Vr=[38,39,40,41,42,43,44,45,46,47,49,50,51,52,65],$Vs=[2,56],$Vt=[2,57],$Vu=[2,58],$Vv=[2,55],$Vw=[1,66],$Vx=[1,65],$Vy=[1,73],$Vz=[1,78],$VA=[1,79],$VB=[1,80],$VC=[1,81],$VD=[1,82],$VE=[1,83],$VF=[1,84],$VG=[1,85],$VH=[1,86],$VI=[1,87],$VJ=[1,88],$VK=[1,89],$VL=[1,90],$VM=[1,91],$VN=[1,92],$VO=[31,84],$VP=[9,29,38,39,40,41,42,43,44,45,46,47,49,50,51,52,61,65,66,81,85],$VQ=[2,24],$VR=[1,100],$VS=[9,29,51,52,61,65,66,81,85],$VT=[1,143],$VU=[29,81],$VV=[9,29,38,39,44,45,46,47,49,50,51,52,61,65,66,81,85],$VW=[9,29,38,39,40,41,42,44,45,46,47,49,50,51,52,61,65,66,81,85],$VX=[9,29,44,45,46,47,49,50,51,52,61,65,66,81,85],$VY=[1,157],$VZ=[1,183],$V_=[1,182],$V$=[61,74,75],$V01=[61,81],$V11=[29,38,39,40,41,42,43,44,45,46,47,49,50,51,52,65];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INI":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"IMPRIMIR":7,"DECLARACION":8,"PTCOMA":9,"ASIGNACION":10,"CONDICIONIF":11,"CONDICIONWHILE":12,"CONDICIONDOWHILE":13,"CONDBREAK":14,"CODCONTINUE":15,"CONDRETURN":16,"CONDSWITCH":17,"CONDINCREMENTO":18,"CONDECREMENTO":19,"CONDFOR":20,"METODOS":21,"LLAMADA":22,"EJECUTAR":23,"FUNCIONES":24,"VECTORES":25,"RESPRINT":26,"PARABRE":27,"EXPRESION":28,"PARCIERRA":29,"TIPODATO":30,"IDENTIFICADOR":31,"IGUAL":32,"RESINT":33,"RESCHAR":34,"RESBOOL":35,"RESDOUBLE":36,"RESSTRING":37,"MAS":38,"MENOS":39,"POR":40,"DIVI":41,"MOD":42,"POTENCIA":43,"COMPARACION":44,"DIFERENTE":45,"MAYOR":46,"MENOR":47,"IFTERNARIO":48,"MAYORIGUAL":49,"MENORIGUAL":50,"AND":51,"OR":52,"NOT":53,"ENTERO":54,"DECIMAL":55,"CADENA":56,"BOOLEANO":57,"CARACTER":58,"RESIF":59,"LLAVEABRE":60,"LLAVECIERRA":61,"RESELSE":62,"RESWHILE":63,"RESDO":64,"INTERROGACION":65,"DOSPUNTOS":66,"RESBREAK":67,"RESCONTINUE":68,"RESRETURN":69,"RESSWITCH":70,"LISTACASOS":71,"DEFECTO":72,"CASO":73,"RESCASE":74,"RESDEFAULT":75,"RESFOR":76,"DECLASIG":77,"ACTUALIZACION":78,"RESVOID":79,"PARAMETROS":80,"COMA":81,"PARLLAMADA":82,"RESEXEC":83,"CORCHABRE":84,"CORCHCIERRA":85,"RESNUEVO":86,"LISTAVALORES":87,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"PTCOMA",26:"RESPRINT",27:"PARABRE",29:"PARCIERRA",31:"IDENTIFICADOR",32:"IGUAL",33:"RESINT",34:"RESCHAR",35:"RESBOOL",36:"RESDOUBLE",37:"RESSTRING",38:"MAS",39:"MENOS",40:"POR",41:"DIVI",42:"MOD",43:"POTENCIA",44:"COMPARACION",45:"DIFERENTE",46:"MAYOR",47:"MENOR",49:"MAYORIGUAL",50:"MENORIGUAL",51:"AND",52:"OR",53:"NOT",54:"ENTERO",55:"DECIMAL",56:"CADENA",57:"BOOLEANO",58:"CARACTER",59:"RESIF",60:"LLAVEABRE",61:"LLAVECIERRA",62:"RESELSE",63:"RESWHILE",64:"RESDO",65:"INTERROGACION",66:"DOSPUNTOS",67:"RESBREAK",68:"RESCONTINUE",69:"RESRETURN",70:"RESSWITCH",74:"RESCASE",75:"RESDEFAULT",76:"RESFOR",79:"RESVOID",81:"COMA",83:"RESEXEC",84:"CORCHABRE",85:"CORCHCIERRA",86:"RESNUEVO"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,2],[6,2],[6,1],[6,1],[6,2],[6,2],[6,1],[6,2],[6,2],[7,5],[8,2],[8,4],[30,1],[30,1],[30,1],[30,1],[30,1],[10,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,2],[28,3],[28,3],[28,3],[28,3],[28,1],[28,3],[28,3],[28,3],[28,3],[28,2],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[11,7],[11,11],[11,9],[12,7],[13,9],[48,5],[14,2],[15,2],[16,1],[16,2],[17,8],[17,7],[17,7],[71,2],[71,1],[73,4],[72,3],[18,3],[19,3],[20,11],[77,1],[77,1],[78,1],[78,1],[78,1],[21,8],[21,7],[80,4],[80,2],[22,4],[22,3],[82,3],[82,1],[23,5],[23,4],[24,8],[24,7],[25,10],[25,8],[87,3],[87,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 72:
if($$[$0]!=false)$$[$0-1].push($$[$0]);this.$=$$[$0-1];
break;
case 3: case 73:
this.$=($$[$0]!=false) ?[$$[$0]]:[];
break;
case 4: case 7: case 8: case 9: case 10: case 11: case 13: case 16: case 17: case 20: case 44: case 56: case 57: case 58: case 79: case 80: case 81: case 82: case 83:
this.$=$$[$0];
break;
case 5: case 6: case 12: case 14: case 15: case 18: case 19: case 21: case 38:
this.$=$$[$0-1];
break;
case 22:
inicio.listaErrores.push(new errores.default('ERROR SINTACTICO',"Se esperaba un token en esta linea",_$[$0-1].first_line,_$[$0-1].first_column));console.log("sinta "); this.$=false;
break;
case 23:
this.$=new print.default($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 24:
this.$= new declaracion.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column,$$[$0]);
break;
case 25:
this.$= new declaracion.default($$[$0-3],_$[$0-3].first_line,_$[$0-3].first_column,$$[$0-2],$$[$0]);
break;
case 26:
this.$= new Tipo.default(Tipo.tipoDato.ENTERO);
break;
case 27:
this.$= new Tipo.default(Tipo.tipoDato.CARACTER);
break;
case 28:
this.$= new Tipo.default(Tipo.tipoDato.BOOLEANO);
break;
case 29:
this.$= new Tipo.default(Tipo.tipoDato.DECIMAL);
break;
case 30:
this.$= new Tipo.default(Tipo.tipoDato.CADENA);
break;
case 31:
this.$=new asignacion.default($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 32:
this.$= new aritmeticas.default(aritmeticas.Operadores.SUMA,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 33:
this.$= new aritmeticas.default(aritmeticas.Operadores.RESTA,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 34:
this.$= new aritmeticas.default(aritmeticas.Operadores.MULTIPLICACION,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 35:
this.$= new aritmeticas.default(aritmeticas.Operadores.DIVISION,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 36:
this.$= new aritmeticas.default(aritmeticas.Operadores.MODULADOR,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 37:
this.$= new aritmeticas.default(aritmeticas.Operadores.POTENCIA,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 39:
this.$=new aritmeticas.default(aritmeticas.Operadores.MENOSNUM,_$[$0-1].first_line,_$[$0-1].first_column,$$[$0]);
break;
case 40:
this.$= new relacional.default(relacional.Relacionales.IGUAL,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 41:
this.$= new relacional.default(relacional.Relacionales.DIFERENTE,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 42:
this.$= new relacional.default(relacional.Relacionales.MAYOR,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 43:
this.$= new relacional.default(relacional.Relacionales.MENOR,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 45:
this.$= new relacional.default(relacional.Relacionales.MAYORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 46:
this.$= new relacional.default(relacional.Relacionales.MENORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 47:
this.$=new logicas.default(logicas.Logicas.AND,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 48:
this.$=new logicas.default(logicas.Logicas.OR,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 49:
this.$=new logicas.default(logicas.Logicas.NOT,_$[$0-1].first_line,_$[$0-1].first_column,$$[$0]);
break;
case 50:
this.$= new nativo.default(new Tipo.default(Tipo.tipoDato.ENTERO),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 51:
this.$= new nativo.default(new Tipo.default(Tipo.tipoDato.DECIMAL),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 52:
this.$= new nativo.default(new Tipo.default(Tipo.tipoDato.CADENA),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 53:
this.$= new nativo.default(new Tipo.default(Tipo.tipoDato.BOOLEANO),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 54:
this.$= new nativo.default(new Tipo.default(Tipo.tipoDato.CARACTER),$$[$0].replace(/['"]+/g, ""),_$[$0].first_line,_$[$0].first_column);
break;
case 55:
this.$=new identificador.default($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 59:
this.$= new condIf.default(_$[$0-6].first_line,_$[$0-6].first_column,$$[$0-4],$$[$0-1],undefined,undefined);
break;
case 60:
this.$= new condIf.default(_$[$0-10].first_line,_$[$0-10].first_column,$$[$0-8],$$[$0-5],$$[$0-1],undefined);
break;
case 61:
this.$= new condIf.default(_$[$0-8].first_line,_$[$0-8].first_column,$$[$0-6],$$[$0-3],undefined,$$[$0]);
break;
case 62:
this.$=new condWhile.default($$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 63:
this.$=new condDoWhile.default($$[$0-2],$$[$0-6],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 64:
this.$=new condTernario.default($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 65:
this.$=new condBreak.default(_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 66:
this.$=new condContinue.default(_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 67:
this.$=new condReturn.default(_$[$0].first_line,_$[$0].first_column); 
break;
case 68:
this.$=new condReturn.default(_$[$0-1].first_line,_$[$0-1].first_column,$$[$0]); 
break;
case 69:
this.$=new condSwitch.default(_$[$0-7].first_line,_$[$0-7].first_column,$$[$0-5],$$[$0-2],$$[$0-1]);
break;
case 70:
this.$=new condSwitch.default(_$[$0-6].first_line,_$[$0-6].first_column,$$[$0-4],$$[$0-1],undefined);
break;
case 71:
this.$=new condSwitch.default(_$[$0-6].first_line,_$[$0-6].first_column,$$[$0-4],undefined,$$[$0-1]);
break;
case 74:
this.$=new condCase.default(_$[$0-3].first_line,_$[$0-3].first_column,$$[$0-2],$$[$0]);
break;
case 75:
this.$=new condDefault.default(_$[$0-2].first_line,_$[$0-2].first_column,$$[$0]);
break;
case 76:
this.$=new Incremento.default($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 77:
this.$=new Decremento.default($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 78:
this.$=new condFor.default($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-10].first_line,_$[$0-10].first_column);
break;
case 84:
this.$=new metodos.default(new Tipo.default(Tipo.tipoDato.VOID),_$[$0-7].first_line,_$[$0-7].first_column,$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 85:
this.$=new metodos.default(new Tipo.default(Tipo.tipoDato.VOID),_$[$0-6].first_line,_$[$0-6].first_column,$$[$0-5],[],$$[$0-1]);
break;
case 86:
$$[$0-3].push({tipato:$$[$0-1],identificador:$$[$0]});this.$=$$[$0-3];
break;
case 87:
this.$=[{tipato:$$[$0-1],identificador:$$[$0]}];
break;
case 88:
this.$=new llamadas.default($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 89:
this.$=new llamadas.default($$[$0-2],[],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 90: case 98:
$$[$0-2].push($$[$0]);this.$=$$[$0-2];
break;
case 91: case 99:
this.$=[$$[$0]];
break;
case 92:
this.$=new ejecucion.default($$[$0-3],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 93:
this.$=new ejecucion.default($$[$0-2],[],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 94:
this.$=new funciones.default($$[$0-7],_$[$0-7].first_line,_$[$0-7].first_column,$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 95:
this.$=new funciones.default($$[$0-6],_$[$0-6].first_line,_$[$0-6].first_column,$$[$0-5],[],$$[$0-1]);
break;
case 96:
this.$=new vectores.default($$[$0-9],$$[$0-6],true,_$[$0-9].first_line,_$[$0-9].first_column,$$[$0-1],$$[$0-3]);
break;
case 97:
this.$=new vectores.default($$[$0-7],$$[$0-4],false,_$[$0-7].first_line,_$[$0-7].first_column,undefined,undefined,$$[$0-1]);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V1,27:$V2,28:33,30:24,31:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg,63:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,76:$Vn,79:$Vo,83:$Vp},{1:[3]},{2:$V0,5:[1,51],6:52,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V1,27:$V2,28:33,30:24,31:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg,63:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,76:$Vn,79:$Vo,83:$Vp},o($Vq,[2,3]),o($Vq,[2,4]),{9:[1,53]},{9:[1,54]},o($Vq,[2,7]),o($Vq,[2,8]),o($Vq,[2,9]),o($Vq,[2,10]),o($Vq,[2,11]),{9:[1,55]},o($Vq,[2,13]),o($Vr,$Vs,{9:[1,56]}),o($Vr,$Vt,{9:[1,57]}),o($Vq,[2,16]),o($Vq,[2,17]),o($Vr,$Vu,{9:[1,58]}),{9:[1,59]},o($Vq,[2,20]),{9:[1,60]},{9:[1,61]},{27:[1,62]},{31:[1,63],84:[1,64]},o($Vr,$Vv,{27:$Vw,32:$Vx}),{27:[1,67]},{27:[1,68]},{60:[1,69]},{9:[1,70]},{9:[1,71]},{9:[2,67],18:74,19:75,22:76,27:$V2,28:72,31:$Vy,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf},{27:[1,77]},{38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,65:$VN},{27:[1,93]},{31:[1,94]},{31:[1,95]},o($VO,[2,26]),o($VO,[2,27]),o($VO,[2,28]),o($VO,[2,29]),o($VO,[2,30]),{18:74,19:75,22:76,27:$V2,28:96,31:$Vy,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf},{18:74,19:75,22:76,27:$V2,28:97,31:$Vy,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf},o($VP,[2,44]),{18:74,19:75,22:76,27:$V2,28:98,31:$Vy,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf},o($VP,[2,50]),o($VP,[2,51]),o($VP,[2,52]),o($VP,[2,53]),o($VP,[2,54]),{1:[2,1]},o($Vq,[2,2]),o($Vq,[2,5]),o($Vq,[2,6]),o($Vq,[2,12]),o($Vq,[2,14]),o($Vq,[2,15]),o($Vq,[2,18]),o($Vq,[2,19]),o($Vq,[2,21]),o($Vq,[2,22]),{18:74,19:75,22:76,27:$V2,28:99,31:$Vy,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf},{9:$VQ,27:[1,101],32:$VR},{85:[1,102]},{18:74,19:75,22:76,27:$V2,28:103,31:$Vy,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf},{18:74,19:75,22:76,27:$V2,28:106,29:[1,105],31:$Vy,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,82:104},{18:74,19:75,22:76,27:$V2,28:107,31:$Vy,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf},{18:74,19:75,22:76,27:$V2,28:108,31:$Vy,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf},{2:$V0,4:109,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V1,27:$V2,28:33,30:24,31:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg,63:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,76:$Vn,79:$Vo,83:$Vp},o($Vq,[2,65]),o($Vq,[2,66]),{9:[2,68],38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,65:$VN},o($VP,$Vv,{27:$Vw}),o($VP,$Vs),o($VP,$Vt),o($VP,$Vu),{18:74,19:75,22:76,27:$V2,28:110,31:$Vy,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf},{18:74,19:75,22:76,27:$V2,28:112,31:$Vy,38:[1,111],39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf},{18:74,19:75,22:76,27:$V2,28:114,31:$Vy,39:[1,113],48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf},{18:74,19:75,22:76,27:$V2,28:115,31:$Vy,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf},{18:74,19:75,22:76,27:$V2,28:116,31:$Vy,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf},{18:74,19:75,22:76,27:$V2,28:117,31:$Vy,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf},{18:74,19:75,22:76,27:$V2,28:118,31:$Vy,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf},{18:74,19:75,22:76,27:$V2,28:119,31:$Vy,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf},{18:74,19:75,22:76,27:$V2,28:120,31:$Vy,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf},{18:74,19:75,22:76,27:$V2,28:121,31:$Vy,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf},{18:74,19:75,22:76,27:$V2,28:122,31:$Vy,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf},{18:74,19:75,22:76,27:$V2,28:123,31:$Vy,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf},{18:74,19:75,22:76,27:$V2,28:124,31:$Vy,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf},{18:74,19:75,22:76,27:$V2,28:125,31:$Vy,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf},{18:74,19:75,22:76,27:$V2,28:126,31:$Vy,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf},{18:74,19:75,22:76,27:$V2,28:127,31:$Vy,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf},{8:129,10:130,30:131,31:[1,132],33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,77:128},{27:[1,133]},{27:[1,134]},{29:[1,135],38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,65:$VN},o($VP,[2,39]),o($VS,[2,49],{38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,49:$VJ,50:$VK}),{29:[1,136],38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,65:$VN},{18:74,19:75,22:76,27:$V2,28:137,31:$Vy,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf},{29:[1,139],30:140,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,80:138},{31:[1,141]},o([9,29],[2,31],{38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,65:$VN}),{29:[1,142],81:$VT},o($VP,[2,89]),o($VU,[2,91],{38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,65:$VN}),{29:[1,144],38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,65:$VN},{29:[1,145],38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,65:$VN},{2:$V0,6:52,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V1,27:$V2,28:33,30:24,31:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg,61:[1,146],63:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,76:$Vn,79:$Vo,83:$Vp},{29:[1,147],38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,65:$VN},o($VP,[2,76]),o($VV,[2,32],{40:$VB,41:$VC,42:$VD,43:$VE}),o($VP,[2,77],{48:44,18:74,19:75,22:76,28:97,27:$V2,31:$Vy,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf}),o($VV,[2,33],{40:$VB,41:$VC,42:$VD,43:$VE}),o($VW,[2,34],{43:$VE}),o($VW,[2,35],{43:$VE}),o($VW,[2,36],{43:$VE}),o($VW,[2,37]),o($VX,[2,40],{38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE}),o($VX,[2,41],{38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE}),o($VX,[2,42],{38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE}),o($VX,[2,43],{38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE}),o($VX,[2,45],{38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE}),o($VX,[2,46],{38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE}),o($VS,[2,47],{38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,49:$VJ,50:$VK}),o([9,29,52,61,65,66,81,85],[2,48],{38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,49:$VJ,50:$VK,51:$VL}),{38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,65:$VN,66:[1,148]},{9:[1,149]},{9:[2,79]},{9:[2,80]},{31:[1,150]},{32:$Vx},{29:[1,152],30:140,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,80:151},{18:74,19:75,22:76,27:$V2,28:106,29:[1,154],31:$Vy,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,82:153},o($VP,[2,38]),{9:[1,155]},{9:[2,25],38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,65:$VN},{29:[1,156],81:$VY},{60:[1,158]},{31:[1,159]},{32:[1,160]},o($VP,[2,88]),{18:74,19:75,22:76,27:$V2,28:161,31:$Vy,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf},{60:[1,162]},{60:[1,163]},{63:[1,164]},{60:[1,165]},{18:74,19:75,22:76,27:$V2,28:166,31:$Vy,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf},{18:74,19:75,22:76,27:$V2,28:167,31:$Vy,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf},{9:$VQ,32:$VR},{29:[1,168],81:$VY},{60:[1,169]},{29:[1,170],81:$VT},{9:[2,93]},o($Vq,[2,23]),{60:[1,171]},{30:172,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8},{2:$V0,4:173,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V1,27:$V2,28:33,30:24,31:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg,63:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,76:$Vn,79:$Vo,83:$Vp},o($VU,[2,87]),{60:[1,175],86:[1,174]},o($VU,[2,90],{38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,65:$VN}),{2:$V0,4:176,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V1,27:$V2,28:33,30:24,31:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg,63:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,76:$Vn,79:$Vo,83:$Vp},{2:$V0,4:177,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V1,27:$V2,28:33,30:24,31:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg,63:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,76:$Vn,79:$Vo,83:$Vp},{27:[1,178]},{71:179,72:180,73:181,74:$VZ,75:$V_},o([9,29,61,65,66,81,85],[2,64],{38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,49:$VJ,50:$VK,51:$VL,52:$VM}),{9:[1,184],38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,65:$VN},{60:[1,185]},{2:$V0,4:186,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V1,27:$V2,28:33,30:24,31:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg,63:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,76:$Vn,79:$Vo,83:$Vp},{9:[2,92]},{2:$V0,4:187,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V1,27:$V2,28:33,30:24,31:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg,63:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,76:$Vn,79:$Vo,83:$Vp},{31:[1,188]},{2:$V0,6:52,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V1,27:$V2,28:33,30:24,31:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg,61:[1,189],63:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,76:$Vn,79:$Vo,83:$Vp},{30:190,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8},{18:74,19:75,22:76,27:$V2,28:192,31:$Vy,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,87:191},{2:$V0,6:52,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V1,27:$V2,28:33,30:24,31:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg,61:[1,193],63:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,76:$Vn,79:$Vo,83:$Vp},{2:$V0,6:52,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V1,27:$V2,28:33,30:24,31:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg,61:[1,194],63:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,76:$Vn,79:$Vo,83:$Vp},{18:74,19:75,22:76,27:$V2,28:195,31:$Vy,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf},{61:[1,197],72:196,73:198,74:$VZ,75:$V_},{61:[1,199]},o($V$,[2,73]),{66:[1,200]},{18:74,19:75,22:76,27:$V2,28:201,31:$Vy,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf},{10:205,18:203,19:204,22:76,27:$V2,28:33,31:$V3,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,78:202},{2:$V0,4:206,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V1,27:$V2,28:33,30:24,31:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg,63:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,76:$Vn,79:$Vo,83:$Vp},{2:$V0,6:52,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V1,27:$V2,28:33,30:24,31:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg,61:[1,207],63:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,76:$Vn,79:$Vo,83:$Vp},{2:$V0,6:52,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V1,27:$V2,28:33,30:24,31:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg,61:[1,208],63:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,76:$Vn,79:$Vo,83:$Vp},o($VU,[2,86]),o($Vq,[2,95]),{84:[1,209]},{61:[1,210],81:[1,211]},o($V01,[2,99],{38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,65:$VN}),o($Vq,[2,59],{62:[1,212]}),o($Vq,[2,62]),{29:[1,213],38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,65:$VN},{61:[1,214]},o($Vq,[2,70]),o($V$,[2,72]),o($Vq,[2,71]),{2:$V0,4:215,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V1,27:$V2,28:33,30:24,31:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg,63:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,76:$Vn,79:$Vo,83:$Vp},{38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,65:$VN,66:[1,216]},{29:[1,217]},o($V11,[2,81]),o($V11,[2,82]),{29:[2,83]},{2:$V0,6:52,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V1,27:$V2,28:33,30:24,31:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg,61:[1,218],63:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,76:$Vn,79:$Vo,83:$Vp},o($Vq,[2,85]),o($Vq,[2,94]),{18:74,19:75,22:76,27:$V2,28:219,31:$Vy,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf},{9:[2,97]},{18:74,19:75,22:76,27:$V2,28:220,31:$Vy,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf},{11:222,59:$Vg,60:[1,221]},{9:[1,223]},o($Vq,[2,69]),{2:$V0,6:52,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V1,27:$V2,28:33,30:24,31:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg,61:[2,75],63:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,76:$Vn,79:$Vo,83:$Vp},{2:$V0,4:224,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V1,27:$V2,28:33,30:24,31:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg,63:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,76:$Vn,79:$Vo,83:$Vp},{60:[1,225]},o($Vq,[2,84]),{38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,65:$VN,85:[1,226]},o($V01,[2,98],{38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,65:$VN}),{2:$V0,4:227,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V1,27:$V2,28:33,30:24,31:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg,63:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,76:$Vn,79:$Vo,83:$Vp},o($Vq,[2,61]),o($Vq,[2,63]),o($V$,[2,74],{7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,30:24,28:33,48:44,6:52,2:$V0,26:$V1,27:$V2,31:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg,63:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,76:$Vn,79:$Vo,83:$Vp}),{2:$V0,4:228,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V1,27:$V2,28:33,30:24,31:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg,63:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,76:$Vn,79:$Vo,83:$Vp},{9:[2,96]},{2:$V0,6:52,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V1,27:$V2,28:33,30:24,31:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg,61:[1,229],63:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,76:$Vn,79:$Vo,83:$Vp},{2:$V0,6:52,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:$V1,27:$V2,28:33,30:24,31:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,48:44,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,59:$Vg,61:[1,230],63:$Vh,64:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,76:$Vn,79:$Vo,83:$Vp},o($Vq,[2,60]),o($Vq,[2,78])],
defaultActions: {51:[2,1],129:[2,79],130:[2,80],154:[2,93],170:[2,92],205:[2,83],210:[2,97],226:[2,96]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

//codigo js
const print=require('./Instrucciones/print');
const nativo= require('./Expresiones/Nativo');
const errores= require('./Excepciones/Errores');
const inicio= require('../indexControllers');
const aritmeticas= require('./Expresiones/Aritmetica');
const Tipo= require('./Simbolos/Tipo');
const logicas= require("./Expresiones/Logica");
const relacional= require("./Expresiones/Relacional");
const declaracion= require("./Instrucciones/Declaracion");
const identificador=require("./Expresiones/Identificador");
const asignacion= require("./Instrucciones/Asignacion");
const condIf= require("./Instrucciones/Condicionales/condIf");
const condWhile= require("./Instrucciones/Ciclicas/condWhile");
const condDoWhile = require("./Instrucciones/Ciclicas/condDoWhile");
const condTernario= require("./Instrucciones/Condicionales/condIfTernario");
const condBreak= require("./Instrucciones/Break");
const condContinue= require("./Instrucciones/Continue");
const condReturn= require("./Instrucciones/Return");
const condSwitch= require("./Instrucciones/Condicionales/condSwitch");
const condDefault= require("./Instrucciones/Condicionales/condSwitchDefault");
const condCase= require("./Instrucciones/Condicionales/condSwitchCase");
const Incremento= require("./Instrucciones/Incremento");
const Decremento= require("./Instrucciones/Decremento");
const condFor= require("./Instrucciones/Ciclicas/condFor");
const metodos= require("./Instrucciones/Metodos");
const llamadas= require("./Instrucciones/LlamadaFuncMetd");
const ejecucion= require("./Instrucciones/Exec");
const funciones= require("./Instrucciones/Funciones");
const vectores=require('./Instrucciones/declaracionVectores');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 59;
break;
case 5:return 62;
break;
case 6:return 26;
break;
case 7:return 33;
break;
case 8:return 34;
break;
case 9:return 36;
break;
case 10:return 35;
break;
case 11:return 37;
break;
case 12:return 63;
break;
case 13:return 64;
break;
case 14:return 67;
break;
case 15:return 68;
break;
case 16:return 69;
break;
case 17:return 70;
break;
case 18:return 74;
break;
case 19:return 75;
break;
case 20:return 76;
break;
case 21:return 79;
break;
case 22:return 83;
break;
case 23:return 86;
break;
case 24:return 60;
break;
case 25:return 81;
break;
case 26:return 61;
break;
case 27:return 52;
break;
case 28:return 51;
break;
case 29:return 9;
break;
case 30:return 27;
break;
case 31:return 29;
break;
case 32:return 84;
break;
case 33:return 85;
break;
case 34:return 38;
break;
case 35:return 39;
break;
case 36:return 41;
break;
case 37:return 40;
break;
case 38:return 42;
break;
case 39:return 43;
break;
case 40:return 44;
break;
case 41:return 50;
break;
case 42:return 49;
break;
case 43:return 32;
break;
case 44:return 45;
break;
case 45:return 53;
break;
case 46:return 47;
break;
case 47:return 46;
break;
case 48:return 65;
break;
case 49:return 66;
break;
case 50: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 56; 
break;
case 51:return 55;
break;
case 52:return 54;
break;
case 53:return 58;
break;
case 54:return 57;
break;
case 55:return 31;
break;
case 56:return 5;
break;
case 57:inicio.listaErrores.push(new errores.default('ERROR LEXICO',yy_.yytext,this._$.first_line,this._$.first_column)); console.log("lexi "+yy_.yytext);
break;
}
},
rules: [/^(?:[ \r\t]+)/i,/^(?:\n+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:print\b)/i,/^(?:int\b)/i,/^(?:char\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:for\b)/i,/^(?:void\b)/i,/^(?:exec\b)/i,/^(?:new\b)/i,/^(?:\{)/i,/^(?:,)/i,/^(?:\})/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:==)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\?)/i,/^(?::)/i,/^(?:"[^]*")/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:'[^\']')/i,/^(?:(true|false)\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,26],$V1=[1,27],$V2=[1,47],$V3=[1,29],$V4=[1,42],$V5=[1,43],$V6=[1,44],$V7=[1,45],$V8=[1,46],$V9=[1,48],$Va=[1,50],$Vb=[1,51],$Vc=[1,52],$Vd=[1,53],$Ve=[1,54],$Vf=[1,55],$Vg=[1,30],$Vh=[1,31],$Vi=[1,32],$Vj=[1,33],$Vk=[1,34],$Vl=[1,35],$Vm=[1,36],$Vn=[1,38],$Vo=[1,39],$Vp=[1,40],$Vq=[1,41],$Vr=[2,5,30,31,35,37,38,39,40,41,43,57,58,59,60,61,62,65,67,69,70,73,74,75,76,80,81,82,85,89,94],$Vs=[42,43,44,45,46,47,48,49,50,51,53,54,55,56,71],$Vt=[2,60],$Vu=[2,61],$Vv=[2,62],$Vw=[2,59],$Vx=[1,77],$Vy=[1,76],$Vz=[1,86],$VA=[1,91],$VB=[1,92],$VC=[1,93],$VD=[1,94],$VE=[1,95],$VF=[1,96],$VG=[1,97],$VH=[1,98],$VI=[1,99],$VJ=[1,100],$VK=[1,101],$VL=[1,102],$VM=[1,103],$VN=[1,104],$VO=[1,105],$VP=[35,50,90],$VQ=[9,33,42,43,44,45,46,47,48,49,50,51,53,54,55,56,67,71,72,87,91],$VR=[2,28],$VS=[1,114],$VT=[1,127],$VU=[9,33,55,56,67,71,72,87,91],$VV=[1,162],$VW=[33,87],$VX=[9,33,42,43,48,49,50,51,53,54,55,56,67,71,72,87,91],$VY=[9,33,42,43,44,45,46,48,49,50,51,53,54,55,56,67,71,72,87,91],$VZ=[9,33,48,49,50,51,53,54,55,56,67,71,72,87,91],$V_=[1,182],$V$=[2,106],$V01=[1,218],$V11=[1,217],$V21=[2,109],$V31=[67,80,81],$V41=[67,87],$V51=[33,42,43,44,45,46,47,48,49,50,51,53,54,55,56,71];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INI":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"IMPRIMIR":7,"DECLARACION":8,"PTCOMA":9,"ASIGNACION":10,"CONDICIONIF":11,"CONDICIONWHILE":12,"CONDICIONDOWHILE":13,"CONDBREAK":14,"CODCONTINUE":15,"CONDRETURN":16,"CONDSWITCH":17,"CONDINCREMENTO":18,"CONDECREMENTO":19,"CONDFOR":20,"METODOS":21,"LLAMADA":22,"EJECUTAR":23,"FUNCIONES":24,"VECTORES":25,"LISTAS":26,"ASIGVECTORES":27,"ASIGLISTAS":28,"AGREGARLISTA":29,"RESPRINT":30,"PARABRE":31,"EXPRESION":32,"PARCIERRA":33,"TIPODATO":34,"IDENTIFICADOR":35,"IGUAL":36,"RESINT":37,"RESCHAR":38,"RESBOOL":39,"RESDOUBLE":40,"RESSTRING":41,"MAS":42,"MENOS":43,"POR":44,"DIVI":45,"MOD":46,"POTENCIA":47,"COMPARACION":48,"DIFERENTE":49,"MAYOR":50,"MENOR":51,"IFTERNARIO":52,"MAYORIGUAL":53,"MENORIGUAL":54,"AND":55,"OR":56,"NOT":57,"ENTERO":58,"DECIMAL":59,"CADENA":60,"BOOLEANO":61,"CARACTER":62,"ACCESOVECTOR":63,"ACCESOLISTAS":64,"RESIF":65,"LLAVEABRE":66,"LLAVECIERRA":67,"RESELSE":68,"RESWHILE":69,"RESDO":70,"INTERROGACION":71,"DOSPUNTOS":72,"RESBREAK":73,"RESCONTINUE":74,"RESRETURN":75,"RESSWITCH":76,"LISTACASOS":77,"DEFECTO":78,"CASO":79,"RESCASE":80,"RESDEFAULT":81,"RESFOR":82,"DECLASIG":83,"ACTUALIZACION":84,"RESVOID":85,"PARAMETROS":86,"COMA":87,"PARLLAMADA":88,"RESEXEC":89,"CORCHABRE":90,"CORCHCIERRA":91,"RESNUEVO":92,"LISTAVALORES":93,"RESLIST":94,"PUNTO":95,"RESADD":96,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"PTCOMA",30:"RESPRINT",31:"PARABRE",33:"PARCIERRA",35:"IDENTIFICADOR",36:"IGUAL",37:"RESINT",38:"RESCHAR",39:"RESBOOL",40:"RESDOUBLE",41:"RESSTRING",42:"MAS",43:"MENOS",44:"POR",45:"DIVI",46:"MOD",47:"POTENCIA",48:"COMPARACION",49:"DIFERENTE",50:"MAYOR",51:"MENOR",53:"MAYORIGUAL",54:"MENORIGUAL",55:"AND",56:"OR",57:"NOT",58:"ENTERO",59:"DECIMAL",60:"CADENA",61:"BOOLEANO",62:"CARACTER",65:"RESIF",66:"LLAVEABRE",67:"LLAVECIERRA",68:"RESELSE",69:"RESWHILE",70:"RESDO",71:"INTERROGACION",72:"DOSPUNTOS",73:"RESBREAK",74:"RESCONTINUE",75:"RESRETURN",76:"RESSWITCH",80:"RESCASE",81:"RESDEFAULT",82:"RESFOR",85:"RESVOID",87:"COMA",89:"RESEXEC",90:"CORCHABRE",91:"CORCHCIERRA",92:"RESNUEVO",94:"RESLIST",95:"PUNTO",96:"RESADD"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,2],[6,2],[6,1],[6,1],[6,2],[6,2],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[7,5],[8,2],[8,4],[34,1],[34,1],[34,1],[34,1],[34,1],[10,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,2],[32,3],[32,3],[32,3],[32,3],[32,1],[32,3],[32,3],[32,3],[32,3],[32,2],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[11,7],[11,11],[11,9],[12,7],[13,9],[52,5],[14,2],[15,2],[16,1],[16,2],[17,8],[17,7],[17,7],[77,2],[77,1],[79,4],[78,3],[18,3],[19,3],[20,11],[83,1],[83,1],[84,1],[84,1],[84,1],[21,8],[21,7],[86,4],[86,2],[22,4],[22,3],[88,3],[88,1],[23,5],[23,4],[24,8],[24,7],[25,10],[25,8],[93,3],[93,1],[63,4],[27,6],[26,11],[64,6],[28,8],[29,6]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 78:
if($$[$0]!=false)$$[$0-1].push($$[$0]);this.$=$$[$0-1];
break;
case 3: case 79:
this.$=($$[$0]!=false) ?[$$[$0]]:[];
break;
case 4: case 7: case 8: case 9: case 10: case 11: case 13: case 16: case 17: case 20: case 48: case 60: case 61: case 62: case 63: case 64: case 85: case 86: case 87: case 88: case 89:
this.$=$$[$0];
break;
case 5: case 6: case 12: case 14: case 15: case 18: case 19: case 21: case 22: case 23: case 24: case 25: case 42:
this.$=$$[$0-1];
break;
case 26:
inicio.listaErrores.push(new errores.default('ERROR SINTACTICO',"Se esperaba un token en esta linea",_$[$0-1].first_line,_$[$0-1].first_column));console.log("sinta "); this.$=false;
break;
case 27:
this.$=new print.default($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 28:
this.$= new declaracion.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column,$$[$0]);
break;
case 29:
this.$= new declaracion.default($$[$0-3],_$[$0-3].first_line,_$[$0-3].first_column,$$[$0-2],$$[$0]);
break;
case 30:
this.$= new Tipo.default(Tipo.tipoDato.ENTERO);
break;
case 31:
this.$= new Tipo.default(Tipo.tipoDato.CARACTER);
break;
case 32:
this.$= new Tipo.default(Tipo.tipoDato.BOOLEANO);
break;
case 33:
this.$= new Tipo.default(Tipo.tipoDato.DECIMAL);
break;
case 34:
this.$= new Tipo.default(Tipo.tipoDato.CADENA);
break;
case 35:
this.$=new asignacion.default($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 36:
this.$= new aritmeticas.default(aritmeticas.Operadores.SUMA,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 37:
this.$= new aritmeticas.default(aritmeticas.Operadores.RESTA,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 38:
this.$= new aritmeticas.default(aritmeticas.Operadores.MULTIPLICACION,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 39:
this.$= new aritmeticas.default(aritmeticas.Operadores.DIVISION,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 40:
this.$= new aritmeticas.default(aritmeticas.Operadores.MODULADOR,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 41:
this.$= new aritmeticas.default(aritmeticas.Operadores.POTENCIA,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 43:
this.$=new aritmeticas.default(aritmeticas.Operadores.MENOSNUM,_$[$0-1].first_line,_$[$0-1].first_column,$$[$0]);
break;
case 44:
this.$= new relacional.default(relacional.Relacionales.IGUAL,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 45:
this.$= new relacional.default(relacional.Relacionales.DIFERENTE,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 46:
this.$= new relacional.default(relacional.Relacionales.MAYOR,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 47:
this.$= new relacional.default(relacional.Relacionales.MENOR,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 49:
this.$= new relacional.default(relacional.Relacionales.MAYORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 50:
this.$= new relacional.default(relacional.Relacionales.MENORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 51:
this.$=new logicas.default(logicas.Logicas.AND,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 52:
this.$=new logicas.default(logicas.Logicas.OR,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 53:
this.$=new logicas.default(logicas.Logicas.NOT,_$[$0-1].first_line,_$[$0-1].first_column,$$[$0]);
break;
case 54:
this.$= new nativo.default(new Tipo.default(Tipo.tipoDato.ENTERO),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 55:
this.$= new nativo.default(new Tipo.default(Tipo.tipoDato.DECIMAL),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 56:
this.$= new nativo.default(new Tipo.default(Tipo.tipoDato.CADENA),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 57:
this.$= new nativo.default(new Tipo.default(Tipo.tipoDato.BOOLEANO),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 58:
this.$= new nativo.default(new Tipo.default(Tipo.tipoDato.CARACTER),$$[$0].replace(/['"]+/g, ""),_$[$0].first_line,_$[$0].first_column);
break;
case 59:
this.$=new identificador.default($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 65:
this.$= new condIf.default(_$[$0-6].first_line,_$[$0-6].first_column,$$[$0-4],$$[$0-1],undefined,undefined);
break;
case 66:
this.$= new condIf.default(_$[$0-10].first_line,_$[$0-10].first_column,$$[$0-8],$$[$0-5],$$[$0-1],undefined);
break;
case 67:
this.$= new condIf.default(_$[$0-8].first_line,_$[$0-8].first_column,$$[$0-6],$$[$0-3],undefined,$$[$0]);
break;
case 68:
this.$=new condWhile.default($$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 69:
this.$=new condDoWhile.default($$[$0-2],$$[$0-6],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 70:
this.$=new condTernario.default($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 71:
this.$=new condBreak.default(_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 72:
this.$=new condContinue.default(_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 73:
this.$=new condReturn.default(_$[$0].first_line,_$[$0].first_column); 
break;
case 74:
this.$=new condReturn.default(_$[$0-1].first_line,_$[$0-1].first_column,$$[$0]); 
break;
case 75:
this.$=new condSwitch.default(_$[$0-7].first_line,_$[$0-7].first_column,$$[$0-5],$$[$0-2],$$[$0-1]);
break;
case 76:
this.$=new condSwitch.default(_$[$0-6].first_line,_$[$0-6].first_column,$$[$0-4],$$[$0-1],undefined);
break;
case 77:
this.$=new condSwitch.default(_$[$0-6].first_line,_$[$0-6].first_column,$$[$0-4],undefined,$$[$0-1]);
break;
case 80:
this.$=new condCase.default(_$[$0-3].first_line,_$[$0-3].first_column,$$[$0-2],$$[$0]);
break;
case 81:
this.$=new condDefault.default(_$[$0-2].first_line,_$[$0-2].first_column,$$[$0]);
break;
case 82:
this.$=new Incremento.default($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 83:
this.$=new Decremento.default($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 84:
this.$=new condFor.default($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-10].first_line,_$[$0-10].first_column);
break;
case 90:
this.$=new metodos.default(new Tipo.default(Tipo.tipoDato.VOID),_$[$0-7].first_line,_$[$0-7].first_column,$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 91:
this.$=new metodos.default(new Tipo.default(Tipo.tipoDato.VOID),_$[$0-6].first_line,_$[$0-6].first_column,$$[$0-5],[],$$[$0-1]);
break;
case 92:
$$[$0-3].push({tipato:$$[$0-1],identificador:$$[$0]});this.$=$$[$0-3];
break;
case 93:
this.$=[{tipato:$$[$0-1],identificador:$$[$0]}];
break;
case 94:
this.$=new llamadas.default($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 95:
this.$=new llamadas.default($$[$0-2],[],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 96: case 104:
$$[$0-2].push($$[$0]);this.$=$$[$0-2];
break;
case 97: case 105:
this.$=[$$[$0]];
break;
case 98:
this.$=new ejecucion.default($$[$0-3],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 99:
this.$=new ejecucion.default($$[$0-2],[],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 100:
this.$=new funciones.default($$[$0-7],_$[$0-7].first_line,_$[$0-7].first_column,$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 101:
this.$=new funciones.default($$[$0-6],_$[$0-6].first_line,_$[$0-6].first_column,$$[$0-5],[],$$[$0-1]);
break;
case 102:
this.$=new vectores.default($$[$0-9],$$[$0-6],true,_$[$0-9].first_line,_$[$0-9].first_column,$$[$0-1],$$[$0-3]);
break;
case 103:
this.$=new vectores.default($$[$0-7],$$[$0-4],false,_$[$0-7].first_line,_$[$0-7].first_column,undefined,undefined,$$[$0-1]);
break;
case 106:
this.$=new accesoVector.default($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 107:
this.$=new modiVector.default($$[$0-5], $$[$0-3], $$[$0],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 108:
this.$=new listas.default($$[$0-8], $$[$0-6],_$[$0-10].first_line,_$[$0-10].first_column, $$[$0-1]);
break;
case 109:
this.$=new accesoLista.default($$[$0-5],$$[$0-2],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 110:
this.$=new modiLista.default($$[$0-7], $$[$0-4], $$[$0],_$[$0-7].first_line,_$[$0-7].first_column);
break;
case 111:
this.$=new agregarLista.default($$[$0-5],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:$V1,31:$V2,32:37,34:28,35:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57,65:$Vg,69:$Vh,70:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,82:$Vn,85:$Vo,89:$Vp,94:$Vq},{1:[3]},{2:$V0,5:[1,58],6:59,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:$V1,31:$V2,32:37,34:28,35:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57,65:$Vg,69:$Vh,70:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,82:$Vn,85:$Vo,89:$Vp,94:$Vq},o($Vr,[2,3]),o($Vr,[2,4]),{9:[1,60]},{9:[1,61]},o($Vr,[2,7]),o($Vr,[2,8]),o($Vr,[2,9]),o($Vr,[2,10]),o($Vr,[2,11]),{9:[1,62]},o($Vr,[2,13]),o($Vs,$Vt,{9:[1,63]}),o($Vs,$Vu,{9:[1,64]}),o($Vr,[2,16]),o($Vr,[2,17]),o($Vs,$Vv,{9:[1,65]}),{9:[1,66]},o($Vr,[2,20]),{9:[1,67]},{9:[1,68]},{9:[1,69]},{9:[1,70]},{9:[1,71]},{9:[1,72]},{31:[1,73]},{35:[1,74],90:[1,75]},o($Vs,$Vw,{31:$Vx,36:$Vy,90:[1,78],95:[1,79]}),{31:[1,80]},{31:[1,81]},{66:[1,82]},{9:[1,83]},{9:[1,84]},{9:[2,73],18:87,19:88,22:89,31:$V2,32:85,35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57},{31:[1,90]},{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,53:$VK,54:$VL,55:$VM,56:$VN,71:$VO},{31:[1,106]},{35:[1,107]},{35:[1,108]},{51:[1,109]},o($VP,[2,30]),o($VP,[2,31]),o($VP,[2,32]),o($VP,[2,33]),o($VP,[2,34]),{18:87,19:88,22:89,31:$V2,32:110,35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57},{18:87,19:88,22:89,31:$V2,32:111,35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57},o($VQ,[2,48]),{18:87,19:88,22:89,31:$V2,32:112,35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57},o($VQ,[2,54]),o($VQ,[2,55]),o($VQ,[2,56]),o($VQ,[2,57]),o($VQ,[2,58]),o($VQ,[2,63]),o($VQ,[2,64]),{1:[2,1]},o($Vr,[2,2]),o($Vr,[2,5]),o($Vr,[2,6]),o($Vr,[2,12]),o($Vr,[2,14]),o($Vr,[2,15]),o($Vr,[2,18]),o($Vr,[2,19]),o($Vr,[2,21]),o($Vr,[2,22]),o($Vr,[2,23]),o($Vr,[2,24]),o($Vr,[2,25]),o($Vr,[2,26]),{18:87,19:88,22:89,31:$V2,32:113,35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57},{9:$VR,31:[1,115],36:$VS},{91:[1,116]},{18:87,19:88,22:89,31:$V2,32:117,35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57},{18:87,19:88,22:89,31:$V2,32:120,33:[1,119],35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57,88:118},{18:87,19:88,22:89,31:$V2,32:121,35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57,90:[1,122]},{96:[1,123]},{18:87,19:88,22:89,31:$V2,32:124,35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57},{18:87,19:88,22:89,31:$V2,32:125,35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57},{2:$V0,4:126,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:$V1,31:$V2,32:37,34:28,35:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57,65:$Vg,69:$Vh,70:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,82:$Vn,85:$Vo,89:$Vp,94:$Vq},o($Vr,[2,71]),o($Vr,[2,72]),{9:[2,74],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,53:$VK,54:$VL,55:$VM,56:$VN,71:$VO},o($VQ,$Vw,{31:$Vx,90:$VT}),o($VQ,$Vt),o($VQ,$Vu),o($VQ,$Vv),{18:87,19:88,22:89,31:$V2,32:128,35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57},{18:87,19:88,22:89,31:$V2,32:130,35:$Vz,42:[1,129],43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57},{18:87,19:88,22:89,31:$V2,32:132,35:$Vz,43:[1,131],52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57},{18:87,19:88,22:89,31:$V2,32:133,35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57},{18:87,19:88,22:89,31:$V2,32:134,35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57},{18:87,19:88,22:89,31:$V2,32:135,35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57},{18:87,19:88,22:89,31:$V2,32:136,35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57},{18:87,19:88,22:89,31:$V2,32:137,35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57},{18:87,19:88,22:89,31:$V2,32:138,35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57},{18:87,19:88,22:89,31:$V2,32:139,35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57},{18:87,19:88,22:89,31:$V2,32:140,35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57},{18:87,19:88,22:89,31:$V2,32:141,35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57},{18:87,19:88,22:89,31:$V2,32:142,35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57},{18:87,19:88,22:89,31:$V2,32:143,35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57},{18:87,19:88,22:89,31:$V2,32:144,35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57},{18:87,19:88,22:89,31:$V2,32:145,35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57},{8:147,10:148,34:149,35:[1,150],37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,83:146},{31:[1,151]},{31:[1,152]},{34:153,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8},{33:[1,154],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,53:$VK,54:$VL,55:$VM,56:$VN,71:$VO},o($VQ,[2,43]),o($VU,[2,53],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,53:$VK,54:$VL}),{33:[1,155],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,53:$VK,54:$VL,55:$VM,56:$VN,71:$VO},{18:87,19:88,22:89,31:$V2,32:156,35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57},{33:[1,158],34:159,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,86:157},{35:[1,160]},o([9,33],[2,35],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,53:$VK,54:$VL,55:$VM,56:$VN,71:$VO}),{33:[1,161],87:$VV},o($VQ,[2,95]),o($VW,[2,97],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,53:$VK,54:$VL,55:$VM,56:$VN,71:$VO}),{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,53:$VK,54:$VL,55:$VM,56:$VN,71:$VO,91:[1,163]},{18:87,19:88,22:89,31:$V2,32:164,35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57},{31:[1,165]},{33:[1,166],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,53:$VK,54:$VL,55:$VM,56:$VN,71:$VO},{33:[1,167],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,53:$VK,54:$VL,55:$VM,56:$VN,71:$VO},{2:$V0,6:59,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:$V1,31:$V2,32:37,34:28,35:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57,65:$Vg,67:[1,168],69:$Vh,70:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,82:$Vn,85:$Vo,89:$Vp,94:$Vq},{18:87,19:88,22:89,31:$V2,32:169,35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57,90:[1,170]},{33:[1,171],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,53:$VK,54:$VL,55:$VM,56:$VN,71:$VO},o($VQ,[2,82]),o($VX,[2,36],{44:$VC,45:$VD,46:$VE,47:$VF}),o($VQ,[2,83],{52:49,63:56,64:57,18:87,19:88,22:89,32:111,31:$V2,35:$Vz,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf}),o($VX,[2,37],{44:$VC,45:$VD,46:$VE,47:$VF}),o($VY,[2,38],{47:$VF}),o($VY,[2,39],{47:$VF}),o($VY,[2,40],{47:$VF}),o($VY,[2,41]),o($VZ,[2,44],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF}),o($VZ,[2,45],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF}),o($VZ,[2,46],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF}),o($VZ,[2,47],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF}),o($VZ,[2,49],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF}),o($VZ,[2,50],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF}),o($VU,[2,51],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,53:$VK,54:$VL}),o([9,33,56,67,71,72,87,91],[2,52],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,53:$VK,54:$VL,55:$VM}),{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,53:$VK,54:$VL,55:$VM,56:$VN,71:$VO,72:[1,172]},{9:[1,173]},{9:[2,85]},{9:[2,86]},{35:[1,174]},{36:$Vy},{33:[1,176],34:159,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,86:175},{18:87,19:88,22:89,31:$V2,32:120,33:[1,178],35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57,88:177},{50:[1,179]},o($VQ,[2,42]),{9:[1,180]},{9:[2,29],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,53:$VK,54:$VL,55:$VM,56:$VN,71:$VO},{33:[1,181],87:$V_},{66:[1,183]},{35:[1,184]},{36:[1,185]},o($VQ,[2,94]),{18:87,19:88,22:89,31:$V2,32:186,35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57},o($Vs,$V$,{36:[1,187]}),{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,53:$VK,54:$VL,55:$VM,56:$VN,71:$VO,91:[1,188]},{18:87,19:88,22:89,31:$V2,32:189,35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57},{66:[1,190]},{66:[1,191]},{69:[1,192]},{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,53:$VK,54:$VL,55:$VM,56:$VN,71:$VO,91:[1,193]},{18:87,19:88,22:89,31:$V2,32:194,35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57},{66:[1,195]},{18:87,19:88,22:89,31:$V2,32:196,35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57},{18:87,19:88,22:89,31:$V2,32:197,35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57},{9:$VR,36:$VS},{33:[1,198],87:$V_},{66:[1,199]},{33:[1,200],87:$VV},{9:[2,99]},{35:[1,201]},o($Vr,[2,27]),{66:[1,202]},{34:203,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8},{2:$V0,4:204,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:$V1,31:$V2,32:37,34:28,35:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57,65:$Vg,69:$Vh,70:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,82:$Vn,85:$Vo,89:$Vp,94:$Vq},o($VW,[2,93]),{66:[1,206],92:[1,205]},o($VW,[2,96],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,53:$VK,54:$VL,55:$VM,56:$VN,71:$VO}),{18:87,19:88,22:89,31:$V2,32:207,35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57},{91:[1,208]},{33:[1,209],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,53:$VK,54:$VL,55:$VM,56:$VN,71:$VO},{2:$V0,4:210,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:$V1,31:$V2,32:37,34:28,35:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57,65:$Vg,69:$Vh,70:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,82:$Vn,85:$Vo,89:$Vp,94:$Vq},{2:$V0,4:211,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:$V1,31:$V2,32:37,34:28,35:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57,65:$Vg,69:$Vh,70:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,82:$Vn,85:$Vo,89:$Vp,94:$Vq},{31:[1,212]},o($VQ,$V$),{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,53:$VK,54:$VL,55:$VM,56:$VN,71:$VO,91:[1,213]},{77:214,78:215,79:216,80:$V01,81:$V11},o([9,33,67,71,72,87,91],[2,70],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,53:$VK,54:$VL,55:$VM,56:$VN}),{9:[1,219],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,53:$VK,54:$VL,55:$VM,56:$VN,71:$VO},{66:[1,220]},{2:$V0,4:221,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:$V1,31:$V2,32:37,34:28,35:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57,65:$Vg,69:$Vh,70:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,82:$Vn,85:$Vo,89:$Vp,94:$Vq},{9:[2,98]},{36:[1,222]},{2:$V0,4:223,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:$V1,31:$V2,32:37,34:28,35:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57,65:$Vg,69:$Vh,70:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,82:$Vn,85:$Vo,89:$Vp,94:$Vq},{35:[1,224]},{2:$V0,6:59,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:$V1,31:$V2,32:37,34:28,35:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57,65:$Vg,67:[1,225],69:$Vh,70:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,82:$Vn,85:$Vo,89:$Vp,94:$Vq},{34:226,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8},{18:87,19:88,22:89,31:$V2,32:228,35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57,93:227},{9:[2,107],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,53:$VK,54:$VL,55:$VM,56:$VN,71:$VO},o($Vs,$V21,{36:[1,229]}),{9:[2,111]},{2:$V0,6:59,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:$V1,31:$V2,32:37,34:28,35:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57,65:$Vg,67:[1,230],69:$Vh,70:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,82:$Vn,85:$Vo,89:$Vp,94:$Vq},{2:$V0,6:59,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:$V1,31:$V2,32:37,34:28,35:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57,65:$Vg,67:[1,231],69:$Vh,70:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,82:$Vn,85:$Vo,89:$Vp,94:$Vq},{18:87,19:88,22:89,31:$V2,32:232,35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57},{91:[1,233]},{67:[1,235],78:234,79:236,80:$V01,81:$V11},{67:[1,237]},o($V31,[2,79]),{72:[1,238]},{18:87,19:88,22:89,31:$V2,32:239,35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57},{10:243,18:241,19:242,22:89,31:$V2,32:37,35:[1,244],43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57,84:240},{2:$V0,4:245,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:$V1,31:$V2,32:37,34:28,35:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57,65:$Vg,69:$Vh,70:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,82:$Vn,85:$Vo,89:$Vp,94:$Vq},{2:$V0,6:59,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:$V1,31:$V2,32:37,34:28,35:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57,65:$Vg,67:[1,246],69:$Vh,70:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,82:$Vn,85:$Vo,89:$Vp,94:$Vq},{92:[1,247]},{2:$V0,6:59,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:$V1,31:$V2,32:37,34:28,35:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57,65:$Vg,67:[1,248],69:$Vh,70:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,82:$Vn,85:$Vo,89:$Vp,94:$Vq},o($VW,[2,92]),o($Vr,[2,101]),{90:[1,249]},{67:[1,250],87:[1,251]},o($V41,[2,105],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,53:$VK,54:$VL,55:$VM,56:$VN,71:$VO}),{18:87,19:88,22:89,31:$V2,32:252,35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57},o($Vr,[2,65],{68:[1,253]}),o($Vr,[2,68]),{33:[1,254],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,53:$VK,54:$VL,55:$VM,56:$VN,71:$VO},o($VQ,$V21),{67:[1,255]},o($Vr,[2,76]),o($V31,[2,78]),o($Vr,[2,77]),{2:$V0,4:256,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:$V1,31:$V2,32:37,34:28,35:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57,65:$Vg,69:$Vh,70:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,82:$Vn,85:$Vo,89:$Vp,94:$Vq},{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,53:$VK,54:$VL,55:$VM,56:$VN,71:$VO,72:[1,257]},{33:[1,258]},o($V51,[2,87]),o($V51,[2,88]),{33:[2,89]},o($Vs,$Vw,{31:$Vx,36:$Vy,90:$VT}),{2:$V0,6:59,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:$V1,31:$V2,32:37,34:28,35:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57,65:$Vg,67:[1,259],69:$Vh,70:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,82:$Vn,85:$Vo,89:$Vp,94:$Vq},o($Vr,[2,91]),{94:[1,260]},o($Vr,[2,100]),{18:87,19:88,22:89,31:$V2,32:261,35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57},{9:[2,103]},{18:87,19:88,22:89,31:$V2,32:262,35:$Vz,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57},{9:[2,110],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,53:$VK,54:$VL,55:$VM,56:$VN,71:$VO},{11:264,65:$Vg,66:[1,263]},{9:[1,265]},o($Vr,[2,75]),{2:$V0,6:59,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:$V1,31:$V2,32:37,34:28,35:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57,65:$Vg,67:[2,81],69:$Vh,70:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,82:$Vn,85:$Vo,89:$Vp,94:$Vq},{2:$V0,4:266,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:$V1,31:$V2,32:37,34:28,35:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57,65:$Vg,69:$Vh,70:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,82:$Vn,85:$Vo,89:$Vp,94:$Vq},{66:[1,267]},o($Vr,[2,90]),{51:[1,268]},{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,53:$VK,54:$VL,55:$VM,56:$VN,71:$VO,91:[1,269]},o($V41,[2,104],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,53:$VK,54:$VL,55:$VM,56:$VN,71:$VO}),{2:$V0,4:270,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:$V1,31:$V2,32:37,34:28,35:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57,65:$Vg,69:$Vh,70:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,82:$Vn,85:$Vo,89:$Vp,94:$Vq},o($Vr,[2,67]),o($Vr,[2,69]),o($V31,[2,80],{7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,34:28,32:37,52:49,63:56,64:57,6:59,2:$V0,30:$V1,31:$V2,35:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,43:$V9,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,65:$Vg,69:$Vh,70:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,82:$Vn,85:$Vo,89:$Vp,94:$Vq}),{2:$V0,4:271,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:$V1,31:$V2,32:37,34:28,35:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57,65:$Vg,69:$Vh,70:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,82:$Vn,85:$Vo,89:$Vp,94:$Vq},{34:272,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8},{9:[2,102]},{2:$V0,6:59,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:$V1,31:$V2,32:37,34:28,35:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57,65:$Vg,67:[1,273],69:$Vh,70:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,82:$Vn,85:$Vo,89:$Vp,94:$Vq},{2:$V0,6:59,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:$V1,31:$V2,32:37,34:28,35:$V3,37:$V4,38:$V5,39:$V6,40:$V7,41:$V8,43:$V9,52:49,57:$Va,58:$Vb,59:$Vc,60:$Vd,61:$Ve,62:$Vf,63:56,64:57,65:$Vg,67:[1,274],69:$Vh,70:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,82:$Vn,85:$Vo,89:$Vp,94:$Vq},{50:[1,275]},o($Vr,[2,66]),o($Vr,[2,84]),{9:[2,108]}],
defaultActions: {58:[2,1],147:[2,85],148:[2,86],178:[2,99],200:[2,98],209:[2,111],243:[2,89],250:[2,103],269:[2,102],275:[2,108]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

//codigo js
const print=require('./Instrucciones/print');
const nativo= require('./Expresiones/Nativo');
const errores= require('./Excepciones/Errores');
const inicio= require('../indexControllers');
const aritmeticas= require('./Expresiones/Aritmetica');
const Tipo= require('./Simbolos/Tipo');
const logicas= require("./Expresiones/Logica");
const relacional= require("./Expresiones/Relacional");
const declaracion= require("./Instrucciones/Declaracion");
const identificador=require("./Expresiones/Identificador");
const asignacion= require("./Instrucciones/Asignacion");
const condIf= require("./Instrucciones/Condicionales/condIf");
const condWhile= require("./Instrucciones/Ciclicas/condWhile");
const condDoWhile = require("./Instrucciones/Ciclicas/condDoWhile");
const condTernario= require("./Instrucciones/Condicionales/condIfTernario");
const condBreak= require("./Instrucciones/Break");
const condContinue= require("./Instrucciones/Continue");
const condReturn= require("./Instrucciones/Return");
const condSwitch= require("./Instrucciones/Condicionales/condSwitch");
const condDefault= require("./Instrucciones/Condicionales/condSwitchDefault");
const condCase= require("./Instrucciones/Condicionales/condSwitchCase");
const Incremento= require("./Instrucciones/Incremento");
const Decremento= require("./Instrucciones/Decremento");
const condFor= require("./Instrucciones/Ciclicas/condFor");
const metodos= require("./Instrucciones/Metodos");
const llamadas= require("./Instrucciones/LlamadaFuncMetd");
const ejecucion= require("./Instrucciones/Exec");
const funciones= require("./Instrucciones/Funciones");
const vectores=require('./Instrucciones/declaracionVectores');
const accesoVector= require('./Instrucciones/accesoVector');
const modiVector = require('./Instrucciones/asignacionVector');
const listas = require('./Instrucciones/declaracionListas');
const accesoLista = require('./Instrucciones/accesoLista');
const modiLista = require('./Instrucciones/asignacionLista');
const agregarLista= require('./Instrucciones/agregarLista');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 65;
break;
case 5:return 68;
break;
case 6:return 30;
break;
case 7:return 37;
break;
case 8:return 38;
break;
case 9:return 40;
break;
case 10:return 39;
break;
case 11:return 41;
break;
case 12:return 69;
break;
case 13:return 70;
break;
case 14:return 73;
break;
case 15:return 74;
break;
case 16:return 75;
break;
case 17:return 76;
break;
case 18:return 80;
break;
case 19:return 81;
break;
case 20:return 82;
break;
case 21:return 85;
break;
case 22:return 89;
break;
case 23:return 92;
break;
case 24:return 94;
break;
case 25:return 96;
break;
case 26:return 66;
break;
case 27:return 87;
break;
case 28:return 67;
break;
case 29:return 56;
break;
case 30:return 55;
break;
case 31:return 9;
break;
case 32:return 31;
break;
case 33:return 33;
break;
case 34:return 90;
break;
case 35:return 91;
break;
case 36:return 42;
break;
case 37:return 43;
break;
case 38:return 45;
break;
case 39:return 44;
break;
case 40:return 46;
break;
case 41:return 47;
break;
case 42:return 48;
break;
case 43:return 54;
break;
case 44:return 53;
break;
case 45:return 36;
break;
case 46:return 49;
break;
case 47:return 57;
break;
case 48:return 51;
break;
case 49:return 50;
break;
case 50:return 71;
break;
case 51:return 72;
break;
case 52:return 95;
break;
case 53: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 60; 
break;
case 54:return 59;
break;
case 55:return 58;
break;
case 56:return 62;
break;
case 57:return 61;
break;
case 58:return 35;
break;
case 59:return 5;
break;
case 60:inicio.listaErrores.push(new errores.default('ERROR LEXICO',yy_.yytext,this._$.first_line,this._$.first_column)); console.log("lexi "+yy_.yytext);
break;
}
},
rules: [/^(?:[ \r\t]+)/i,/^(?:\n+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:print\b)/i,/^(?:int\b)/i,/^(?:char\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:for\b)/i,/^(?:void\b)/i,/^(?:exec\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:\{)/i,/^(?:,)/i,/^(?:\})/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:==)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\.)/i,/^(?:"[^\"]*")/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:'[^\']')/i,/^(?:(true|false)\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}